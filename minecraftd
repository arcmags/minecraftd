#!/bin/bash
## minecraftd ::

print_help() {
cat <<'HELPDOC'
NAME
    minecraftd

SYNOPSIS
    minecraftd [COMMAND]

DESCRIPTION
    minecraftd is Minecraft server daemon control script. It can start, stop,
    and send commands to a minecraft server (java) running in the background.

COMMANDS
    start, srt
        Start minecraft server.

    stop, stp
        Stop minecraft server.

    command, cmd [COMMAND...]
        Send COMMAND to minecraft server.

    connect, con
        Launch interactive minecraft server input prompt.

    -H, --help
        Display help text and exit.

CONFIGURATION
    minecraftd sources the following config files (if they exist) in order:
        /etc/minecraftd.conf      - system wide config
        /etc/minecraftd.d/*       - system wide drop-in config
        ~/.config/minecraftd.conf - user config
        ./minecraftd.conf         - local config

    These files are strict-yaml containing the following keys:
        jar - server jar file (default: /usr/share/java/minecraft-server.jar)
        mem - maximum memory allocated to server (default: 2g)
        srv - server directory (default: /srv/minecraft)
HELPDOC
}

## internal control ::
cfgs=(/etc/minecraftd.conf /etc/minecraftd.d/* ~/.config/minecraftd.conf minecraftd.conf)
cmd=
fifo='/tmp/minecraftd.fifo'
flg_cmd=false
flg_con=false
flg_srt=false
flg_stp=false
jar='/usr/share/java/minecraft-server.jar'
mem='2g'
mem_srt='1g'
mem_tmp=
reqs=(java)
srv='/srv/minecraft'

## functions ::
error() { msg_error "$@"; exit 5 ;}
msg() { printf "\e[1;38;5;12m=> \e[0;38;5;15m$1\e[0m\n" "${@:2}" ;}
msg_error() { printf "\e[1;38;5;9mE: \e[0;38;5;15m$1\e[0m\n" "${@:2}" >&2 ;}
msg_warn() { printf "\e[1;38;5;11mW: \e[0;38;5;15m$1\e[0m\n" "${@:2}" >&2 ;}

# write to system log if running via systemd:
if [ $PPID -eq 1 ]; then
    msg() { logger -p 5 --id=$$ -t minecraftd "$@" ;}
    msg_error() { logger -p 3 --id=$$ -t minecraftd "$@" ;}
    msg_warn() { logger -p 4 --id=$$ -t minecraftd "$@" ;}
fi

server() {
    trap '{ kill "$pid_fifo" &>/dev/null; rm -f "$fifo" ;}' EXIT
    rm -f "$fifo"
    mkfifo "$fifo"
    chmod +t "$fifo"
    sleep infinity >"$fifo" &
    local pid_fifo=$!
    cd "$srv"
    msg "java -Xms${mem_srt} -Xmx${mem} -jar $jar --nogui"
    java "-Xms${mem_srt}" "-Xmx${mem}" -jar "$jar" --nogui <"$fifo"
    sleep 1
    echo here2
    exit
}

## main ::
[ $# -eq 0 ] && { print_help; exit 0 ;}

case "$1" in
    cmd|command) flg_cmd=true ;;
    con|connect) flg_con=true ;;
    srt|start) flg_srt=true ;;
    stp|stop) flg_stp=true ;;
    -H|--help) print_help; exit 0 ;;
    *) error "unknown option: $1" ;;
esac
shift
cmd="$*"

[ "$flg_cmd" != true ] && [ -n "$cmd" ] && error "too many args: $*"

for req in "${reqs[@]}"; do if ! command -v "$req" &>/dev/null; then
    error "missing requirement: $req"
fi; done

# parse config:
mapfile -t lines < <(sed -E -e 's/(^\s+|\s+$)//g' -e '/^(#|$|-$)/d' "${cfgs[@]}" 2>/dev/null)
for line in "${lines[@]}"; do
    [[ "$line" =~ ^jar:\ +(.*) ]] && jar="${BASH_REMATCH[1]}" && continue
    [[ "$line" =~ ^mem:\ +(.*) ]] && mem="${BASH_REMATCH[1]}" && continue
    [[ "$line" =~ ^srv:\ +(.*) ]] && srv="${BASH_REMATCH[1]}" && continue
done

[ ! -f "$jar" ] && error "jar not found: $jar"

[[ ! "${mem,,}" =~ ^([0-9]+)([kmg]?)$ ]] && error "invalid memory string: $mem"
if [ "${BASH_REMATCH[2]}" = k ]; then
    mem_tmp=$((BASH_REMATCH[1] * 1000))
elif [ "${BASH_REMATCH[2]}" = m ]; then
    mem_tmp=$((BASH_REMATCH[1] * 1000000))
elif [ "${BASH_REMATCH[2]}" = g ]; then
    mem_tmp=$((BASH_REMATCH[1] * 1000000000))
else
    mem_tmp="$mem"
fi
[ "$mem_tmp" -lt 5000000 ] && error "not enough memory (500m min): $mem"
[ "$mem_tmp" -lt 1000000000 ] && mem_srt="$mem"

# start server:
if [ "$flg_srt" = true ]; then
    # TODO: check for pid of minecraftd
    [ -p "$fifo" ] && error "fifo already exist: $fifo"
    [ ! -d "$srv" ] && error "server directory not found: $srv"
    [ ! -w "$srv" ] && error "cannot write server directory: $srv"
    server &
    sleep 0.2
    true >"$fifo"
    exit
fi

[ ! -e "$fifo" ] && error 'server fifo not found'
[ ! -w "$fifo" ] && error 'cannot write server fifo'

# send commands to server:
[ "$flg_stop" = true ] && printf 'stop\n' >"$fifo"
[ "$flg_cmd" = true ] && printf '%s\n' "$cmd" >"$fifo"

# connect to server
if [ "$flg_con" = true ]; then
    msg 'connected to minecraft server stdin...'
    while read -rep $'\e[1;38;5;10m'"> "$'\e[0m' cmd; do
        cmd="${cmd,,}"
        [ "$cmd" = quit ] || [ "$cmd" = exit ] && break
        [[ ! "$cmd" =~ ^\ *$ ]] && printf '%s\n' "$cmd" >"$fifo"
        [ "$cmd" = stop ] && break
    done
fi

# vim:ft=bash
